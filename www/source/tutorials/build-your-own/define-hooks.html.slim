---
title: Habitat - Define Hooks
---

section
 h1 Define Hooks

 p Similar to defining the setup and installation experience at buildtime, behavior for your application or service needs to be defined when the supervisor starts it. This is done at runtime through event hooks. Hooks are script files with #{link_to 'shebangs', 'https://en.wikipedia.org/wiki/Shebang_(Unix)'} that you can use to customize this behavior. 
 
 p The following hooks are available:

 ul
  li 
    p <b>init</b>: Run first when by supervisor during startup. 
  li
    p <b>run</b>: The only required hook is the run hook and if you are only calling a built binary, you can specify that through a <code>pkg_svc_run</code> setting. Anything more complicated than running a binary and pointing to a local configuration file in the <code>config</code> directory will require you to create a run hook.
  li 
    p <b>health_check</b>: Allows you to perform a quick health check on your application. The exit code and any health check output can be retrieved through an HTTP API request on the <code>/health</code> endpoint.
  li
    p <b>reconfigure</b>: If you have configuration information 
  li
    p <b>file_updated</b>:
  li 
    p <b>reload</b>:
  li 
    p <b>suitability</b>:
  li 
    p <b>post_run</b>:
  li 
    p <b>smoke_test</b>:

 h2 Scaffolding-generated Hooks

 p Scaffoldings are meant to provide you a default package that handles the majority of use cases for your web application by auto-detecting the application type. In the case of the Ruby scaffolding, the init and run hooks are created for you during build time, unless overridden. 
 
 p The default init hook does the following:

 ul
  li 
    p Sets up the environment variables for your Rails app to connect to a database.
  li 
    p If your app type is a supported Rails app (version 4.1, 4.2, or 5.x), it will prompt you to set the <code>SECRET_KEY_BASE</code> value before initialization can complete.
  li 
    p If your app references the <code>pg</code> gem in your Gemfile.lock, it will attempt to connect to a PostgreSQL database (either as a standalone database, or as another Habitat package).

 p Once your web app has finished initializing, the run hook is executed. The run hook generated by the Ruby scaffolding uses the default run hook generated by the studio by using the <code>pkg_svc_run</code> setting. The default binary that is run is a wrapped version of 
 

 p Most used helper functions

 p Link to more advanced helper functions  

 p If your service does not require custom behavior during the lifecycle of the running service, then you do not need to create hooks. Also, if you only need to start the application or service when the Habitat service starts, you can instead use the `pkg_svc_run` setting and specify the command as a string. When your package is created, a basic run hook will be created by Habitat.

 p And, as mentioned above, you can use any of the [runtime configuration settings](/docs/reference/plan-syntax#runtime-configuration-settings), either defined by you in your config file, or defined by Habitat.

 p See #{link_to 'Hooks', '/docs/reference/hooks'} for more information and examples.

= link_to 'Next: Customize Configuration', '/tutorials/build-your-own/define-config/', class: 'button cta'