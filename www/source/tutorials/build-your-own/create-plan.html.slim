---
title: Habitat - Create Your Plan
---

section
 h1 Create Your Plan

 p At the center of Habitat packaging is the plan. This is a directory comprised of shell scripts and optional configuration files that define how you download, configure, make, install, and manage the lifecycle of the software in the package. When writing a plan, it's important to understand that you are defining both how the package is built and how the Habitat service will behave when the supervisor starts and manages the child process in the package. 

 p Just like in #{link_to 'Build a Sample App', '/tutorials/sample-app/'}, the quickest way to package your web app is by using scaffolding. This guide focuses on using the Ruby scaffolding to help you create a Habitat package for your application. 
 
 p Scaffolding helps you build and package applications which follow the common patterns and practices for that application type. In other words, the more your application follows the conventions, the more scaffolding helps you. It detects the type of application you've created and will create a Habitat package for that type at build time. For example, if you have a Ruby-on-Rails application, the Ruby scaffolding will parse your Gemfile and make sure the correct build and runtime dependencies are part of your package. It will also detect what version of Rails you're running and set sensible default behaviors for your initialization and run hooks.

 p To use scaffolding, navigate to the root of your project repo and run the following <code>hab plan init</code> subcommand. 
 
 pre
  code.console $ hab plan init -s ruby

 p Using <code>hab plan init</code> will result in a new directory located at <code>/path/to/repo/habitat</code> on your workstation. A <code>plan.sh</code> file will be created and the <code>pkg_name</code> variable in it will be set to the name of the parent directory. Also, any environment variables that you have previouly set (such as <code>HAB_ORIGIN</code>) will be used to populate the respective <code>pkg_*</code> variables. Because we specified the ruby scaffolding as an argument, your plan.sh will also include a reference to it.

 p See #{link_to 'hab plan init', '/docs/reference/habitat-cli#hab-plan-init'} for more information on how to use this subcommand.

 p The basic structure of a plan is shown below:

 pre
  code.console $ tee
       .
       ├── config
       ├── default.toml
       ├── hooks
       └── plan.sh

 blockquote
  p Note: The plan.sh file is the only required file to create a package. Configuration files, runtime hooks, and other source files are optional.

 h2 Versioning

 p While this isn't specific to scaffolding, every package needs a version number to use as part of its package identification and the <code>hab plan init</code> subcommand does not stub out a version for you. You have two options for adding versioning: 

 ul
  li Explicitly add <code>pkg_version</code> to your plan.sh
  li Use the <code>pkg_version()</code> and <code>update_pkg_version()</code> helper functions to compute <code>pkg_version</code>

 p See #{link_to 'Basic settings','/docs/reference/basic-settings/'} and #{link_to 'Utility functions', '/docs/reference/utility-functions/'} in the reference documentation for more information on these versioning options.

 h3 Defining the Ruby version

 p 

 p Once you have either set or configured the version information for your plan, you can successfully build your web app package. Now that you have stubbed out your plan, the rest of the steps in this guide will show you how to customize it. These customization steps are not required; however, you will likely need to do some customization to ensure the expected behavior of your running Habitat service.

= link_to 'Next: Define Dependencies', '/tutorials/build-your-own/define-dependencies-callbacks/', class: 'button cta'

