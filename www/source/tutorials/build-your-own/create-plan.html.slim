---
title: Habitat - Create Your Plan
---

section
 h1 Create Your Plan

 p At the center of Habitat packaging is the plan. This is a directory comprised of shell scripts and optional configuration files that define how you download, configure, make, install, and manage the lifecycle of the software in the package. When writing a plan, it's important to understand that you are defining both how the package is built and how the Habitat service will behave when the supervisor starts and manages the child process in the package. 

 p Just like in #{link_to 'Build a Sample App', '/tutorials/sample-app/'}, the quickest way to package your web app is using scaffolding. This is because scaffolding takes care of many common configuration and setup steps for you. This guide also focuses on using the Ruby scaffolding to build on knowledge that you gained while doing the tutorial. 
 

 h2 Using Scaffolding

 p \[Talk about more of what the scaffolding creates for you and the logic that it uses.\]

 p Navigate to the root of your project repo and the following <code>hab plan init</code> subcommand. 
 
 pre
  code hab plan init -s ruby

 p Using <code>hab plan init</code> will result in a new directory located at <code>/path/to/&ltreponame&gt/habitat</code> on your workstation. A <code>plan.sh</code> file will be created and the <code>pkg_name</code> variable in it will be set to &ltreponame&gt. Also, any environment variables that you have previouly set (such as <code>HAB_ORIGIN</code>) will be used to populate the respective <code>pkg_*</code> variables.

 p The basic structure of a plan is shown below:

 p \[Insert tree view of habitat sub-directory\]

 p See #{link_to 'hab plan init', '/docs/reference/habitat-cli#hab-plan-init'} for more information on how to use this subcommand.

 p Now that you have stubbed out your plan.sh file in your plan context, let's go over the customizatino options for your plan.

 blockquote
  p Note: The plan.sh file is the only required file to create a package. Configuration files, runtime hooks, and other source files are optional.

= link_to 'Next: Define Dependencies', '/tutorials/build-your-own/define-dependencies-callbacks/', class: 'button cta'

