---
title: Habitat - Define Processes
---

section
 h1 Define Processes

 p #{link_to 'Processes', 'https://12factor.net/processes'} are defined in the #{link_to '12-factor app document','https://12factor.net/'}  as running services or ephemeral tasks. Each of these processes are wrapped up in a small script which sets up a suitable app environment and invokes a command. By convention, a web app using the Ruby scaffolding will use the <code>web</code> process in the default implementation of the run hook. 
 
 pre
  code
   |
    pkg_svc_run="$pkg_prefix/bin/${pkg_name}-web"
 
 p That process resolves to the following command:

 pre
  code
   |
    bundle exec rails server -p $PORT 

 p Also, the Ruby scaffolding will use the detected app type to determine some of the processes to be created. For example, if your Gemfile.lock has the rake gem and a Rakefile exists in your app's root directory, a <code>rake</code> process will be generated that runs the following task:

 pre
  code
   |
    bundle exec rake

 p A bare-bones shell process will also be generated for all apps. Due to the process-wrapping logic, this shell session will have its $PATH correctly set, all appropriate environment variables set, and it will run in the app's installed root path.

 pre
  code
   |
    sh

 h2 Specifying Processes

 p To customize your app's processes, there are two locations you can do this:

 ol
  li Use a #{link_to 'Procfile', 'https://devcenter.heroku.com/articles/procfile'} in your app's root directory
  li Setup the scaffolding_process_bins array in your Plan

 p It is recommended to use the Procfile strategy first as this is portable across other Ruby app build and deployment solutions. If you define the same process name in both locations, the one defined in the <code>scaffolding_process_bins</code> array will take precedence.

 h3 Specifying Processes in a Procfile

 p You can override default processes or even add new ones by including a Procfile in your app's root directory. By convention, the web entry will be invoked by your package's run hook and will therefore be considered your package's main service. Additional entries will generate additional processes in your package. For example, the following Procfile will generate <code>yourapp-web</code> and <code>yourapp-release</code> processes where <i>yourapp</i> corresponds to the <code>pkg_name</code> value specified in your plan.sh.

 pre
  code
   |
    web: bundle exec puma -t 5:5 -p $PORT
    release: bundle exec rake db:migrate

 p The scaffolding will produce the <code>your_app-web</code> and <code>your_app-release</code> processes in the resulting package under <code>$pkg_prefix/bin</code> which will be in the package's $PATH environment. Note that additional processes may also be generated depending on the app type detected.

 h3 Specifying Processes in Your Plan

 p Much like #{link_to 'adding additional environment variables','/tutorials/build-your-own/define-variables/'}  through an associative array, you can override default processes or even add new ones by creating the <code>scaffolding_process_bins</code> array in your plan.sh file.
 
 p For example, let's take an app whose package name is set to "my_app" (by setting <code>pkg_name="my_app"</code> in your plan.sh):

 pre
  code
   |
    declare -A scaffolding_process_bins
    # Override the default web process
    scaffolding_process_bins[web]='bundle exec puma -t 5:5 -p ${PORT}'
    # Add an addition process called release
    scaffolding_process_bins[release]='bundle exec rake db:migrate'

 p The scaffolding will produce my_app-web and my_app-release processes in the resulting package under <code>$pkg_prefix/bin</code> which will be in the package's $PATH environment. 

 p By default, the Ruby scaffolding will create the following processes for you as items in the <code>scaffolding_process_bins</code> array.

 p If Rails is detected:

 ul
  li web: bundle exec rails server -p $PORT
  li console: bundle exec rails console
  
 p If Rack is detected:

 ul
  li web: bundle exec rackup config.ru -p $PORT
  li console: bundle exec irb

 p If a Rakefile is detected:

 ul
  li rake: bundle exec rake

 p For all app types:

 ul
  li sh: sh

 = link_to 'Next: Define Dependencies', '/tutorials/build-your-own/define-dependencies-callbacks/', class: 'button cta'