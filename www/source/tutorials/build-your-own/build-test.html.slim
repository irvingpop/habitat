---
title: Habitat - Build and Test
---

section
 h1 Build and Test

 

 h2 Building and exporting your package

 p From the root of your local project, run the following:

 pre
  code $ hab studio enter

 pre
  code # build

 p After you have built your package, export it to a Docker container.

 pre
  code # hab pkg export docker origin/package && exit

 p The following example shows how to start the Docker container running your Habitat package.  

 pre
  code $ docker run -it origin/package

 p The default behavior is use a production Rails environment, so you will not be able to start up your rails package without supplying a <code>SECRET_KEY_BASE</code> value. This is because the default init hook generated by the Ruby scaffolding puts in a conditional check to make sure you have that entered before completing the initialization process.

 p Setting the <code>SECRET_KEY_BASE</code> value can be accomplished in two ways:

 ol
  li
   p You can use an environemnt variable that is passed in when starting the web app container.
  li
   p You can update your default.toml (either through a configuration update, or when the service starts up).

 p Either choice involves you creating an alphanumeric value. If you are using Rails, you can generate this by running the following command from within the local repo directory of your rails app project.

 pre 
  code $ rails secret

 p To pass in an environment variable, make sure the value to pass in is quoted correctly. 

 pre
  code $ echo -n 'secret_key_base="$(rails secret)"' | hab apply --peer RAILS_IP_ADDRESS yourapp.default $(date +%s)

 p To pass in <code>secret_key_base</code> in TOML, you can do that by either running <code>hab apply</code> or defining the value in the <code>default.toml</code> in your web application's Habitat plan. To do the latter, add this to your <code>default.toml</code>:

 pre
  code
   |
    secret_key_base = "some_secret_key_value"

 h2 Debugging your plan

 p When debugging your plan, it is important to understand what you can use to debug buildtime issues versus what you must do to diagnose runtime issues.

 h3 Debugging at buildtime

 p [Add content on how to use attach and the debug writeline functionality]

 h3 Debugging at runtime

 p Debugging at runtime involves using a few different techniques to 

 pre
  code $ docker exec -it CONTAINERID sh

 p Now that you are in the shell of the container with root access, you can observe if runtime hooks follow the business logic that you defined when you created your plan. By navigating to <code>/hab/svc/packagename/</code> you should be able to search through the svc directory and <code>cat</code> the files to make sure they are behaving as expected.

= link_to 'Next: Next Steps', '/tutorials/build-your-own/next-steps/', class: 'button cta'